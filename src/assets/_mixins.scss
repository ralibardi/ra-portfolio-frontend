@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use 'colours' as *;
@use 'variables' as *;
@use 'fonts' as *;

$themes: (
    light: (--accent-colour: map.get($primary, 1),
        --secondary-colour: map.get($secondary, 2),
        --light-grey: map.get($grey, 1),
        --grey: map.get($grey, 2),
        --dark-grey: map.get($grey, 3),
        --text-colour: $black,
        --background-colour: $white,
        --foreground-colour: map.get($grey, 3),
    ),
    dark: (--accent-colour: map.get($primary, 3),
        --secondary-colour: map.get($secondary, 2),
        --light-grey: map.get($grey, 4),
        --grey: map.get($grey, 5),
        --dark-grey: map.get($grey, 6),
        --text-colour: $white,
        --background-colour: $black,
        --foreground-colour: map.get($grey, 4),
    )
);

@mixin theme($mode: light) {
    $theme: map.get($themes, $mode);

    @if $theme {
        @each $name, $value in $theme {
            #{$name}: #{$value};
        }
    }

    @else {
        @warn "Unsupported theme mode: #{$mode}";
    }
}

@mixin font-style($size: map.get($font-sizes, md), $weight: map.get($font-weights, medium), $color: var(--text-colour)) {
    font: $weight $size $font-family;
    color: $color;
}

@mixin size($width: auto, $height: auto) {
    width: $width;
    height: $height;
}

@mixin flexbox($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
    display: flex;
    flex-flow: $direction $wrap;
    justify-content: $justify;
    align-items: $align;
}

@mixin box-shadow($x: map.get($spacing, 0), $y: map.get($spacing, '3xs'), $blur: map.get($spacing, '2xs'), $spread: map.get($spacing, '2xs'), $color: $black, $inset: false) {
    $shadow: $x $y $blur;

    @if $spread !=null {
        $shadow: $shadow $spread;
    }

    box-shadow: if($inset, inset, null) $shadow $color;
}

@mixin transition($properties...) {
    $transitions: (
    );

@each $prop in $properties {
    @if meta.type-of($prop)=='list' {
        $transitions: list.append($transitions, list.join($prop, ' '), comma);
    }

    @else {
        $transitions: list.append($transitions, $prop, comma);
    }
}

transition: $transitions;
}

@mixin border-radius($radius: map.get($border, md)) {
    border-radius: $radius;
}

@mixin transform($scale: 1, $rotate: 0deg, $translate: null) {
    $transforms: (
    );

@if $scale !=1 {
    $transforms: list.append($transforms, scale($scale));
}

@if $rotate !=0deg {
    $transforms: list.append($transforms, rotate($rotate));
}

@if $translate {
    $transforms: list.append($transforms, translate($translate));
}

transform: if(list.length($transforms) > 0, list.join($transforms, ' '), none);
}

// New utility mixins
@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin responsive($breakpoint) {
    @if map.has-key($breakpoints, $breakpoint) {
        @media screen and (min-width: map.get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    @else {
        @warn "Unknown breakpoint: #{$breakpoint}";
    }
}